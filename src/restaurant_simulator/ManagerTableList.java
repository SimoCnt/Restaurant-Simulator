package restaurant_simulator;

import com.toedter.calendar.JTextFieldDateEditor;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;


/**
 * Interfaccia Grafica ManagerTable, si occupa della visualizzazione della disponibilità dei 
 * tavoli del ristorante in relazione alla data selezionata
 * 
 * @author Danilo Dolce e Simone Contini
 * @version 1.0
 */
public class ManagerTableList extends javax.swing.JFrame {
    
    /**
     * Il ristorante
     */
    Restaurant rest;
   
    private final String fileOrderPath = "data/Order.csv";
    
    
    /**
     * Costruttore senza parametri della classe ManagerTableList
     */
    public ManagerTableList() {
        super("Restaurant Simulator (MM): Agenda");
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }
    
    
    /**
     * Costruttore con parametri della classe ManagerTableList
     * 
     * @param rest istanza di tipo Ristorante
     */
    public ManagerTableList(Restaurant rest) {
        super("Restaurant Simulator (MM): Agenda");
        initComponents();
        this.rest = rest;
        
        // Rendo non editabile il campo data
        JTextFieldDateEditor editor = (JTextFieldDateEditor) txtDateChooser.getDateEditor();
        editor.setEditable(false);
        
        btnBack.addActionListener(
            ev -> {
                ManagerHome managerMenu = new ManagerHome();
                managerMenu.setVisible(true);
                this.setVisible(false);
            });
        
        btnVerify.addActionListener(
            ev -> {
                ManagerCheckTableStatusValidator validator = new ManagerCheckTableStatusValidator();
                boolean validModel = false;

                // Effettuo la validazione dei campi per la verifica della disponibilità di un tavolo
                try{
                    validModel = validator.validate(this);
                }
                catch(ManagerTableStatusException e) {
                    JOptionPane.showMessageDialog(this, e.getMessage(), "ErrorBox", JOptionPane.ERROR_MESSAGE);
                }

                // Posso procedere con la fase successiva solo se il "modello" (campi per l'aggiunta di un tavolo) sono validi
                if (validModel) {
                    SimpleDateFormat dataStandardFormat = new SimpleDateFormat("dd-MM-yyyy");
                    String dataString = dataStandardFormat.format(txtDateChooser.getDate());
                    String time = cbTimeChooser.getItemAt(cbTimeChooser.getSelectedIndex());
                    String dateSelectedString = dataString + " " + time;
                    Date dateSelected = DateUtility.parseDateWithTime(dateSelectedString);

                    // Resetto il contenuto del JTextPane
                    txtListTable.setText("");

                    for(int i=0; i<rest.getTables().size(); i++){
                        if(this.rest.checkTableStatus(rest.getTables().get(i).getId(), dateSelected)){
                            txtListTable.append(rest.getTables().get(i).getName() + ": Libero\n");
                        }
                        else{
                            txtListTable.append(rest.getTables().get(i).getName() + ": Occupato"+""
                                + " ("+this.rest.getUserWithTableReservationForSpecificDate(rest.getTables().get(i).getId(), dateSelected).getEmail()+")\n");
                        }   
                    }
                }
            });
        
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(DISPOSE_ON_CLOSE);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtDateChooser = new com.toedter.calendar.JDateChooser();
        lblDataChooser = new javax.swing.JLabel();
        lblTimeChooser = new javax.swing.JLabel();
        cbTimeChooser = new javax.swing.JComboBox<>();
        btnVerify = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtListTable = new javax.swing.JTextArea();
        jPanel3 = new javax.swing.JPanel();
        btnBack = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(45, 52, 54));
        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Disponibilità tavoli", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        txtDateChooser.setName("txtDateChooser"); // NOI18N

        lblDataChooser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblDataChooser.setForeground(new java.awt.Color(255, 255, 255));
        lblDataChooser.setText("Data");

        lblTimeChooser.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        lblTimeChooser.setForeground(new java.awt.Color(255, 255, 255));
        lblTimeChooser.setText("Ora");

        cbTimeChooser.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "12:00", "13:00", "14:00", "19:00", "20:00", "21:00" }));

        btnVerify.setText("Verifica");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(txtDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                    .addComponent(lblDataChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblTimeChooser, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbTimeChooser, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnVerify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(lblDataChooser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(txtDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(lblTimeChooser)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbTimeChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnVerify)
                .addContainerGap(196, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(45, 52, 54));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Tavoli", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N

        txtListTable.setEditable(false);
        txtListTable.setColumns(20);
        txtListTable.setRows(5);
        jScrollPane2.setViewportView(txtListTable);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 385, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane2)
                .addGap(20, 20, 20))
        );

        jPanel3.setBackground(new java.awt.Color(45, 52, 54));

        btnBack.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/left-arrow.png"))); // NOI18N
        btnBack.setToolTipText("Torna indietro");
        btnBack.setBorder(null);
        btnBack.setContentAreaFilled(false);
        btnBack.setFocusPainted(false);
        btnBack.setFocusable(false);
        btnBack.setMargin(new java.awt.Insets(2, 0, 2, 0));

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnBack)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(btnBack)
                .addContainerGap(20, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Questo metodo permette di ottenere la data inserita in input per cui si desidera
     * effettuare la verifica dello stato dei tavoli del ristorante
     * 
     * @return la data in cui si vuole effettuare una prenotazione digitata in input
     */
    public String getInputDate() {
        if (txtDateChooser.getDate()==null)
            return "";
        else
            return DateUtility.formatDateWithTime(txtDateChooser.getDate());
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ManagerTableList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ManagerTableList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ManagerTableList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ManagerTableList.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new ManagerTableList().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnVerify;
    private javax.swing.JComboBox<String> cbTimeChooser;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lblDataChooser;
    private javax.swing.JLabel lblTimeChooser;
    private com.toedter.calendar.JDateChooser txtDateChooser;
    private javax.swing.JTextArea txtListTable;
    // End of variables declaration//GEN-END:variables
}
