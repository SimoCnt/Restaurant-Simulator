package restaurant_simulator;

import javax.swing.text.SimpleAttributeSet;
import javax.swing.text.StyleConstants;
import javax.swing.text.StyledDocument;
import java.awt.Font;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.text.BadLocationException;


/**
 * Interfaccia Grafica UserReceipt, consente di visualizzare la ricevuta di un'ordine 
 * selezionato nella sezione I miei Ordini della Modalità Utente e permette di effettuarne
 * la stampa e il salvataggio sul file

 * @author Danilo Dolce e Simone Contini
 * @version 1.0
 */
public class UserReceipt extends javax.swing.JFrame {
    
    private Order order;
    
    
    /**
     * Costruttore senza parametri della classe UserReceipt
     */
    public UserReceipt() {
        super("Ricevuta ordine: ");
        initComponents();
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }
    
    
    /**
     * Costruttore con parametri della classe UserReceipt
     * 
     * @param order l'ordine di cui visualizzare la ricevuta
     */
    public UserReceipt(Order order) {
        super("Ricevuta ordine: "+order.getId());
        initComponents();
        this.order = order;
        printReceipt();
        
        btnPrintFromPrinter.addActionListener(
            ev -> {
                UserReceiptOperationExecutor userReceiptOperationExecutor = new UserReceiptOperationExecutor();
                userReceiptOperationExecutor.executeOperation(this::printReceiptWithPrinter);
            });
        
        btnSaveReceiptToFile.addActionListener(
            ev -> {
                UserReceiptOperationExecutor userReceiptOperationExecutor = new UserReceiptOperationExecutor();
                userReceiptOperationExecutor.executeOperation(this::saveReceiptToFile);
            });
        
        
        this.setResizable(false);
        this.setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
    }

    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtPaneReceipt = new javax.swing.JTextPane();
        btnPrintFromPrinter = new javax.swing.JButton();
        btnSaveReceiptToFile = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(45, 52, 54));

        txtPaneReceipt.setEditable(false);
        jScrollPane2.setViewportView(txtPaneReceipt);

        btnPrintFromPrinter.setFont(new java.awt.Font("Tahoma", 0, 12)); // NOI18N
        btnPrintFromPrinter.setForeground(new java.awt.Color(255, 255, 255));
        btnPrintFromPrinter.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/printer.png"))); // NOI18N
        btnPrintFromPrinter.setText("Stampa");
        btnPrintFromPrinter.setToolTipText("Stampa ricevuta con stampante");
        btnPrintFromPrinter.setBorderPainted(false);
        btnPrintFromPrinter.setContentAreaFilled(false);
        btnPrintFromPrinter.setFocusPainted(false);
        btnPrintFromPrinter.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        btnPrintFromPrinter.setMargin(new java.awt.Insets(2, 0, 2, 0));
        btnPrintFromPrinter.setPreferredSize(new java.awt.Dimension(85, 40));

        btnSaveReceiptToFile.setForeground(new java.awt.Color(255, 255, 255));
        btnSaveReceiptToFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/download.png"))); // NOI18N
        btnSaveReceiptToFile.setText("Scarica");
        btnSaveReceiptToFile.setToolTipText("Scarica ricevuta");
        btnSaveReceiptToFile.setBorderPainted(false);
        btnSaveReceiptToFile.setContentAreaFilled(false);
        btnSaveReceiptToFile.setMargin(new java.awt.Insets(2, 0, 2, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(28, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 640, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnPrintFromPrinter, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(btnSaveReceiptToFile)))
                .addContainerGap(28, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrintFromPrinter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSaveReceiptToFile))
                .addGap(21, 21, 21)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 419, Short.MAX_VALUE)
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
    
    /**
     * Questo metodo renderizza la ricevuta dell'ordine nella corrispettiva area
     */
    public void printReceipt() {
        StyledDocument document = (StyledDocument) txtPaneReceipt.getDocument();
        txtPaneReceipt.setText(""); // Resetto il contenuto della TextPane
        
        try {
            SimpleAttributeSet restName = new SimpleAttributeSet();
            StyleConstants.setFontFamily(restName, "Courier New");
            StyleConstants.setFontSize(restName, 26);
            StyleConstants.setBold(restName, true);
            StyleConstants.setAlignment(restName, StyleConstants.ALIGN_CENTER);
            document.setParagraphAttributes(0, 0, restName, false);

            document.insertString(document.getLength(), RestaurantService.getTableNameByIdFromCsv(0).toUpperCase()+"\n", restName);

            SimpleAttributeSet content = new SimpleAttributeSet();
            StyleConstants.setFontSize(content, 14);
            StyleConstants.setAlignment(content, StyleConstants.ALIGN_LEFT);
            document.setParagraphAttributes(document.getLength(), document.getLength(), content, false);

            String separator = "******************************************************************************";
            document.insertString(document.getLength(), separator, null);

            Font font = new Font("Courier New", Font.PLAIN, 12);
            txtPaneReceipt.setFont(font);

            document.insertString(document.getLength(), "\n\nId ordine: "+order.getId()+"\n", null);
            document.insertString(document.getLength(), "\nData: "+DateUtility.formatDateWithTime(order.getData())+"\n", null);
            document.insertString(document.getLength(), "\nProdotto | Prezzo\n", null);
            for(OrderItem item : order.getOrderItems()) {
                document.insertString(document.getLength(), "\nx1 "+item.getProductName()+ "  € "+item.getPrice()+"\n", null);
            }
            SimpleAttributeSet total = new SimpleAttributeSet();
            StyleConstants.setFontSize(total, 20);

            document.insertString(document.getLength(), "\n\nTotale: € "+order.getTotalPrice(), total);

            document.insertString(document.getLength(), "\n\nContante: € "+order.getInsertedCash(), null);
            document.insertString(document.getLength(), "\n\nResto: € "+order.getRest()+"\n", null);
            document.insertString(document.getLength(), separator, null);

            SimpleAttributeSet thanks = new SimpleAttributeSet();
            StyleConstants.setFontSize(thanks, 24);
            StyleConstants.setAlignment(thanks, StyleConstants.ALIGN_CENTER);
            document.insertString(document.getLength(), "\n\nGrazie e arrivederci!", thanks);
            document.setParagraphAttributes(document.getLength(), document.getLength(), thanks, false);

        } catch(BadLocationException e) {
            e.printStackTrace();
        }
    }
    
    
    /**
     * Questo metodo apre la funzione di stampa del computer per stampare la ricevuta visualizzata nella relativa area
     */
    public void printReceiptWithPrinter() {
        IPrintJTextComponent menu = new PrintJTextPaneWithPrinter(txtPaneReceipt);
        menu.printJTextComponent();
    }
    
    
    /**
     * Questo metodo permette di salvare la ricevuta in un file di testo
     */
    public void saveReceiptToFile(){
         
        // se l'area di output non è vuota
        if (!txtPaneReceipt.getText().isEmpty()) {
            JFrame parentFrame = new JFrame();

            JFileChooser fileChooser = new JFileChooser(); // permette di scegliere dove salvare il file
            fileChooser.setSelectedFile(new File("output.txt"));
            FileNameExtensionFilter txt = new FileNameExtensionFilter("File di testo", "txt");
            fileChooser.setFileFilter(txt);
            int userSelection = fileChooser.showSaveDialog(parentFrame);

            if (userSelection == JFileChooser.APPROVE_OPTION) {
                File fileToSave = fileChooser.getSelectedFile();

                String path = fileToSave.getAbsolutePath();
                try {
                    File file = new File(path);
                    file.getParentFile().mkdirs();
                    FileWriter fw = new FileWriter(file);
                    fw.write(txtPaneReceipt.getText());
                    JOptionPane.showMessageDialog(rootPane, "File salvato correttamente nella directory: "+path);
                    System.out.println("File salvato in: " + fileToSave.getAbsolutePath());
                    fw.flush();
                    fw.close();
                }
                catch(IOException e) {
                    JOptionPane.showMessageDialog(rootPane, "Si è verificato un errore nel salvataggio del file: "+path, "ErrorBox", JOptionPane.ERROR_MESSAGE);
                }
            }
        }
        else {
            JOptionPane.showMessageDialog(rootPane, "Nessuna ricevuta da stampare", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
        }
    }
    
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(UserReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(UserReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(UserReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(UserReceipt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new UserReceipt().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnPrintFromPrinter;
    private javax.swing.JButton btnSaveReceiptToFile;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextPane txtPaneReceipt;
    // End of variables declaration//GEN-END:variables
}
