package restaurant_simulator;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Stream;
import javax.swing.JOptionPane;

/**
 * Rappresenta la GUI principale di Restaurant Simulator, quest'ultima permette
 * di accedere alle due modalità: Modalità Manager (ovvero l'utente che agisce come proprietario
 * del ristorante) e Modalità cliente (ovvero l'utente che agisce come cliente del ristorante)
 * 
 * @author Danilo Dolce e Simone Contini
 * @version 1.0
 */
public class RestaurantSimulator extends javax.swing.JFrame {
        
    private final static String fileRestaurantInfoPath = "data/RestaurantInfo.csv";
    private final static String fileTablePath = "data/Table.csv";
    private final static String fileCategoryPath = "data/Category.csv";
    private final static String fileProductPath = "data/Product.csv";
    private final static String fileUserPath = "data/User.csv";
    private final static String fileOrderPath = "data/Order.csv";
    private final static String fileOrderItemPath = "data/OrderItem.csv";
    private final static String fileCategoryFeedbackPath = "data/CategoryFeedback.csv";
    private final static String fileFeedbackPath = "data/Feedback.csv";
    
    private final static List<String> restaurantInfoHeaderCsv = Arrays.asList("Id", "Name");
    private final static List<String> userHeaderCsv = Arrays.asList("Id", "Username", "Email", "Password");
    private final static List<String> tableHeaderCsv = Arrays.asList("Id", "Name", "NumberSeats");
    private final static List<String> categoryHeaderCsv = Arrays.asList("Id", "Name");
    private final static List<String> productHeaderCsv = Arrays.asList("Id", "CategoryId", "Name", "Ingredients", "Price");
    private final static List<String> orderHeaderCsv = Arrays.asList("Id", "UserId", "TableId", "Date", "Total", "State", "InsertedImport", "Rest", "ReleasedFeedback", "DateSimulated");
    private final static List<String> orderItemHeaderCsv = Arrays.asList("Id", "ProductId", "FinalProductName", "Price");
    private final static List<String> categoryFeedbackHeaderCsv = Arrays.asList("Id", "Name");
    private final static List<String> feedbackHeaderCsv = Arrays.asList("Id", "CategoryFeedbackId", "OrderId", "UserId", "Value");
    
    private final static String fileManagerModeDescriptionpath = "file/managerMode.txt";

    /**
     * Costruttore senza parametri della classe RestaurantSimulatore
     */
    public RestaurantSimulator() {
        super("Restaurant Simulator");
        initComponents();
        
        btnManagerMode.addActionListener(
            ev -> {
                if (CsvUtility.importDataFromCsv(fileRestaurantInfoPath).size()>0) {
                    ManagerHome managerMenu = new ManagerHome();
                    managerMenu.setVisible(true);
                }
                else {
                    RestaurantPreConfig rc = new RestaurantPreConfig();
                    rc.setVisible(true);
                }
            });
        
        
        btnUserMode.addActionListener(
            ev -> {
                File file = new File(fileRestaurantInfoPath);
                // Posso accedere alla modalità utente se esiste una configurazione per il ristorante
                try (Stream<String> stream = Files.lines(Paths.get(fileRestaurantInfoPath)).skip(1)) {
                    if (stream.toArray().length > 0) {
                        RestaurantBuilderDirector rcd = new RestaurantBuilderDirector();
                        RestaurantConcreteBuilder rcb = new RestaurantConcreteBuilder();
                        Restaurant rest = rcd.buildRestaurant(rcb);
                        UserAuthentication signup = new UserAuthentication(rest.getFeedback());
                        signup.setVisible(true);
                    }
                    else {
                        JOptionPane.showMessageDialog(this, "Info: Per accedere alla modalità utente devi prima configurare il tuo ristorante", "InfoBox", JOptionPane.INFORMATION_MESSAGE);
                    }
                } catch (IOException e) {
                    JOptionPane.showMessageDialog(this, "Errore: si è verificato un errore nella lettura del file: "
                            +fileRestaurantInfoPath, "ErrorBox", JOptionPane.ERROR_MESSAGE);
                }
            });
        
        this.setResizable(false);
        this.setLocationRelativeTo(null);
    }
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        lblTitle = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        btnManagerMode = new javax.swing.JButton();
        btnUserMode = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(45, 52, 54));

        lblTitle.setFont(new java.awt.Font("Muli", 3, 24)); // NOI18N
        lblTitle.setForeground(new java.awt.Color(255, 255, 255));
        lblTitle.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        lblTitle.setText("Restaurant Simulator");

        jPanel2.setBackground(new java.awt.Color(45, 52, 54));
        jPanel2.setLayout(new java.awt.GridLayout(2, 0));

        btnManagerMode.setFont(new java.awt.Font("Muli", 0, 14)); // NOI18N
        btnManagerMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Manager.png"))); // NOI18N
        btnManagerMode.setToolTipText("Clicca per accedere in modalità Manager");
        btnManagerMode.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modalità Manager", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        btnManagerMode.setContentAreaFilled(false);
        btnManagerMode.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        btnManagerMode.setFocusPainted(false);
        btnManagerMode.setPreferredSize(new java.awt.Dimension(317, 128));
        jPanel2.add(btnManagerMode);

        btnUserMode.setFont(new java.awt.Font("Muli", 0, 14)); // NOI18N
        btnUserMode.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/users.png"))); // NOI18N
        btnUserMode.setToolTipText("Clicca per accedere in modalità cliente");
        btnUserMode.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Modalità Cliente", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 0, 11), new java.awt.Color(255, 255, 255))); // NOI18N
        btnUserMode.setContentAreaFilled(false);
        btnUserMode.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jPanel2.add(btnUserMode);

        jSeparator1.setBackground(new java.awt.Color(255, 255, 0));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 370, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jSeparator1)
                    .addComponent(lblTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(20, 20, 20))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(lblTitle)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 20, Short.MAX_VALUE)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, 365, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Metodo main, metodo principale di RestaurantSimulator
     * 
     * @param args gli argomenti della riga di comando
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RestaurantSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RestaurantSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RestaurantSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RestaurantSimulator.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        
        if (!new File(fileRestaurantInfoPath).exists()) {
            CsvUtility.createEmptyCsv(fileRestaurantInfoPath);
            CsvUtility.addLineToCsv(restaurantInfoHeaderCsv, fileRestaurantInfoPath);
        }
        
        if (!new File(fileUserPath).exists()) {
            CsvUtility.createEmptyCsv(fileUserPath);
            CsvUtility.addLineToCsv(userHeaderCsv, fileUserPath);
        }
        
        if (!new File(fileTablePath).exists()) {
            CsvUtility.createEmptyCsv(fileTablePath);
            CsvUtility.addLineToCsv(tableHeaderCsv, fileTablePath);
        }
        
        if (!new File(fileOrderPath).exists()) {
            CsvUtility.createEmptyCsv(fileOrderPath);
            CsvUtility.addLineToCsv(orderHeaderCsv, fileOrderPath);
        }
        
        if (!new File(fileOrderItemPath).exists()) {
            CsvUtility.createEmptyCsv(fileOrderItemPath);
            CsvUtility.addLineToCsv(orderItemHeaderCsv, fileOrderItemPath);
        }
        
        if (!new File(fileCategoryFeedbackPath).exists()) {
            CsvUtility.createEmptyCsv(fileCategoryFeedbackPath);
            CsvUtility.addLineToCsv(categoryFeedbackHeaderCsv, fileCategoryFeedbackPath);
            CsvUtility.addLineToCsv(Arrays.asList("0", "Servizio"), fileCategoryFeedbackPath);
            CsvUtility.addLineToCsv(Arrays.asList("1", "Rapporto qualita\\prezzo"), fileCategoryFeedbackPath);
            CsvUtility.addLineToCsv(Arrays.asList("2", "Ambiente"), fileCategoryFeedbackPath);
        }
        
        if (!new File(fileFeedbackPath).exists()) {
            CsvUtility.createEmptyCsv(fileFeedbackPath);
            CsvUtility.addLineToCsv(feedbackHeaderCsv, fileFeedbackPath);
        }
        
        if (!new File(fileCategoryPath).exists()) {
            CsvUtility.createEmptyCsv(fileCategoryPath);
            CsvUtility.addLineToCsv(categoryHeaderCsv, fileCategoryPath);
            CsvUtility.addLineToCsv(Arrays.asList("0", "Starter"), fileCategoryPath);
            CsvUtility.addLineToCsv(Arrays.asList("1", "FirstCourse"), fileCategoryPath);
            CsvUtility.addLineToCsv(Arrays.asList("2", "SecondCourse"), fileCategoryPath);
            CsvUtility.addLineToCsv(Arrays.asList("3", "Fruit"), fileCategoryPath);
            CsvUtility.addLineToCsv(Arrays.asList("4", "Dessert"), fileCategoryPath);
            CsvUtility.addLineToCsv(Arrays.asList("5", "Drink"), fileCategoryPath);
        }
        
        if (!new File(fileProductPath).exists()) {
            CsvUtility.createEmptyCsv(fileProductPath);
            CsvUtility.addLineToCsv(productHeaderCsv, fileProductPath);
        }
        
        if (!new File(fileManagerModeDescriptionpath).exists()) {
            String intro = "Benvenuto nella Modalità Manager, in questa modalità potrai:\n";
            intro+="- Aggiungere dei tavoli al tuo ristorante\n";
            intro+="- Creare e modificare il tuo menu\n";
            intro+="- Visualizzare la lista dei tuoi clienti\n";
            intro+="- Visualizzare la lista degli ordini ricevuti compreso il loro dettaglio\n";
            intro+="- Visualizzare la disponibilità dei tavoli per una data specifica\n";
            intro+="- Simulare il completamento delle ordinazioni ricevute\n";
            intro+="\n\nPrima di cominciare inserisci il nome del tuo ristorante nell'apposito campo.\n";
            
            try {
                Files.write(Paths.get(fileManagerModeDescriptionpath), intro.getBytes());
            } catch (IOException e) {
                System.out.println("Si è verificato un errore nella scrittura del file: "+fileManagerModeDescriptionpath);
            }
        }
        

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {                
                new RestaurantSimulator().setVisible(true);
            } 
        }); 
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnManagerMode;
    private javax.swing.JButton btnUserMode;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lblTitle;
    // End of variables declaration//GEN-END:variables
}
